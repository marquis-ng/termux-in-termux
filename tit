#!/bin/bash
TMPDIR="${TMPDIR:-/tmp}"
TERMUX_ROOTFS_PATH="$(realpath -- "${HOME}/termux-fs")"
TERMUX_BOOTSTRAP_PATH="$(realpath -- "${TMPDIR}/termux-fs.zip")"
TERMUX_APP_PATH="/data/data/com.termux"
TERMUX_FILES_PATH="${TERMUX_APP_PATH}/files"
TERMUX_MIRROR_APT="https://packages.termux.dev/apt/termux-main"
TERMUX_MIRROR_PACMAN="https://service.termux-pacman.dev/main"
TERMUX_32_BIT=false
TERMUX_PACMAN=false

RED=""
GREEN=""
YELLOW=""
BLUE=""
MAGENTA=""
CYAN=""
BOLD=""
DIM=""
DEFAULT=""

strcmp() {
	# shellcheck disable=SC2254
	case "$1" in
		$2)
			return 0
			;;
		*)
			return 1
			;;
	esac
}

info() {
	printf "${CYAN}[!] %b${DEFAULT}\n" "$*"
}

error() {
	local EXIT=true
	if strcmp "$1" "-*"; then
		while IFS= read -rn1 c; do
			case "$c" in
				n)
					EXIT=false
					;;
			esac
		done <<< "$1"
		shift
	fi
	printf "${BOLD}${RED}[x] %b${DEFAULT}\n" "$*" 1>&2
	if [ "$EXIT" = true ]; then
		exit 1
	fi
	return 1
}

ok() {
	printf "${GREEN}[✓] %b${DEFAULT}\n" "$*"
}

run() {
	local EXIT=""
	local MUTE=false
	if strcmp "$1" "-*"; then
		while IFS= read -rn1 c; do
			case "$c" in
				n)
					EXIT="-n"
					;;
				m)
					MUTE=true
					;;
			esac
		done <<< "$1"
		shift
	fi
	local ACTION="$1"
	shift
	info "$ACTION"
	if ([ "$MUTE" = true ] && exec > /dev/null 2>&1; ! "$@"); then
		error $EXIT "$ACTION"
		return 1
	fi
	ok "$ACTION"
}

if [ -t 1 ] && command -v tput > /dev/null; then
	RED="$(tput setaf 1)"
	GREEN="$(tput setaf 2)"
	YELLOW="$(tput setaf 3)"
	BLUE="$(tput setaf 4)"
	MAGENTA="$(tput setaf 5)"
	CYAN="$(tput setaf 6)"
	BOLD="$(tput bold)"
	DIM="$(tput dim)"
	DEFAULT="$(tput sgr0)"
fi

unset cleanup
trap "error -n \"Received SIGINT\"; if [ \"\$(type -t cleanup)\" = \"function\" ]; then run \"Cleaning up\" cleanup; fi; exit 1" INT

similar() {
	if ! command -v python3 > /dev/null; then
		printf "\n"
		return 1
	fi
	python3 - <<- EOM
	from difflib import get_close_matches as gcm
	m = gcm("$1", ("install", "login", "remove", "list", "backup", "restore", "help"))
	if m:
	    print(f"    ${BOLD}${RED}Do you mean: '{m[0]}'?${DEFAULT}\n")
	else:
	    print("")
	EOM
}

usage() {
	local EXITCODE=1
	# shellcheck disable=SC2155
	local PROGNAME="$(basename -- "$0")"
	if [ "$1" = "-ne" ]; then
		EXITCODE=0
		shift
	fi
	if [ "$#" != 0 ]; then
		error -n "$@" 1>&2
		printf "\n" 1>&2
	fi
	printf "%b${DEFAULT}\n" "${BOLD}${YELLOW}Termux-in-Termux (by marquis-ng)"\
		"${DIM}An isolated environment of Termux inside Termux."\
		"${DIM}GitHub: https://github.com/marquis-ng/termux-in-termux\n"\
		"${BOLD}${YELLOW}Usage:"\
		"  ${GREEN}${PROGNAME} ${MAGENTA}COMMAND ${CYAN}{ARGS[]}"\
		"  ${GREEN}${PROGNAME} ${MAGENTA}[-h,--help,help]\n"\
		"${BOLD}${YELLOW}Commands:"\
		"  ${MAGENTA}install ${CYAN}[--32-bit | -p,--pacman | --reset]"\
		"      ${BLUE}Install the sandbox."\
		"  ${MAGENTA}login ${CYAN}[--32-bit | -p,--pacman | -b,--bind {DIR | FILE} |\n          -w,--workdir {DIR}] [-- {CMD[]}]"\
		"      ${BLUE}Login the sandbox."\
		"  ${MAGENTA}remove ${CYAN}[--32-bit | -p,--pacman | -y,--yes]"\
		"      ${BLUE}Remove the sandbox."\
		"  ${MAGENTA}list ${CYAN}[-i,--installed | -s,--size]"\
		"      ${BLUE}Show disk usage for each sandbox."\
		"  ${MAGENTA}backup ${CYAN}[--32-bit | -p,--pacman | -f,--force] -o,--output {FILE}"\
		"      ${BLUE}Backup the sandbox."\
		"  ${MAGENTA}restore ${CYAN}[-y,--yes] -a,--archive {FILE}"\
		"      ${BLUE}Restore a backup made by the program." 1>&2
	exit "$EXITCODE"
}

DEPS=(wget unzip tar ar proot)
UNAME="$(uname -o)"
if [ "$UNAME"  != "Android" ] && [ "$UNAME" != "GNU/Linux" ]; then
	error "Unsupported platform: '${UNAME}'"
fi

if [ "$(id -u)" = 0 ]; then
	error "Detected root (UID=0)"
fi

for DEP in "${DEPS[@]}"; do
	if ! command -v "$DEP" > /dev/null; then
		error "Command not found: '${DEP}'"
	fi
done

ARCH="$(uname -m)"
case "$ARCH" in
	aarch64|arm64)
		ARCH="aarch64"
		IS64=true
		;;
	arm|armel|armhf|armhfp|armv7|armv7l|armv7a|armv8l)
		ARCH="arm"
		IS64=false
		;;
	x86_64|amd64)
		ARCH="x86_64"
		IS64=true
		;;
	x86|i*86)
		ARCH="i686"
		IS64=false
		;;
	*)
		error "Unsupported architecture: ${ARCH}"
		;;
esac

tit_check_installed() {
	if [ ! -d "$TERMUX_ROOTFS_PATH" ] || [ -z "$(ls -A "$TERMUX_ROOTFS_PATH")" ] || [ -f "${TERMUX_ROOTFS_PATH}/SYMLINKS.txt" ]; then
		return 1
	elif [ "$UNAME" = "Android" ] || [ "$1" = "-n" ]; then
		return 0
	elif [ "$TERMUX_PACMAN" = false ] && {
 		[ ! -f "${TERMUX_ROOTFS_PATH}/var/lib/dpkg/status" ] || ! grep -q "Package: bionic-host" "${TERMUX_ROOTFS_PATH}/var/lib/dpkg/status"
	}; then
		return 2
	elif [ "$TERMUX_PACMAN" = true ] && find "${TERMUX_ROOTFS_PATH}/var/lib/pacman/local" -type d -regex "\./bionic-host-[^-]+-[^-]+" -print -quit 2>/dev/null | grep -q .; then
		return 2
	elif [ ! -f "${TERMUX_ROOTFS_PATH}/system/bin/toybox" ]; then
		return 2
	else
		return 0
	fi
}

tit_set_vars() {
	if [ "$PRESERVE" = true ]; then
		return 0
	fi

	SOURCE="termux/termux-packages"
	if [ "$TERMUX_PACMAN" = true ]; then
		FPREFIX="${TERMUX_ROOTFS_PATH%termux*}"
		FSUFFIX="${TERMUX_ROOTFS_PATH#"$FPREFIX"}"
		TERMUX_ROOTFS_PATH="${FPREFIX}${FSUFFIX/termux/termux-pacman}"
		FPREFIX="${TERMUX_BOOTSTRAP_PATH%termux*}"
		FSUFFIX="${TERMUX_BOOTSTRAP_PATH#"$FPREFIX"}"
		TERMUX_BOOTSTRAP_PATH="${FPREFIX}${FSUFFIX/termux/termux-pacman}"
		SOURCE="termux-pacman/termux-packages"
	fi

	if [ "$TERMUX_32_BIT" = true ]; then
		if [ "$IS64" != true ] || [ "$UNAME" = "GNU/Linux" ]; then
			error "Unsupported option: '--32-bit'"
		fi
		TERMUX_ROOTFS_PATH+="32"
		TERMUX_BOOTSTRAP_PATH="${TERMUX_BOOTSTRAP_PATH%.zip}32.zip"
		if [ "$ARCH" = "aarch64" ]; then
			BOOTSTRAP_ARCH="arm"
		else
			BOOTSTRAP_ARCH="i686"
		fi
	else
		BOOTSTRAP_ARCH="$ARCH"
	fi

	if [ "$BOOTSTRAP_ARCH" = "arm" ]; then
		TOYBOX_ARCH="armv7l"
	else
		TOYBOX_ARCH="$BOOTSTRAP_ARCH"
	fi
}

tit_install() {
	local RESET=false
	while [ "$#" != 0 ]; do
		case "$1" in
			--32-bit)
				TERMUX_32_BIT=true
				;;
			-p|--pacman)
				TERMUX_PACMAN=true
				;;
			--reset)
				RESET=true
				;;
			*)
				usage "Unrecognized option: '$1'"
				;;
		esac
		shift
	done
	tit_set_vars

	if [ "$RESET" = true ] && tit_check_installed -n; then
		local PRESERVE=true
		tit_remove
	fi

	case "$(tit_check_installed; printf "%s" "$?")" in
		0)
			error "Install destination exists"
			;;
		1)
			tit_install_bootstrap
			;;
		2)
			tit_install_system
			;;
	esac
}

tit_install_bootstrap() {
	if [ -f "$TERMUX_BOOTSTRAP_PATH" ]; then
		info "Use cached Termux bootstrap"
	else
		if [ -e "$TERMUX_BOOTSTRAP_PATH" ]; then
			run "Remove Termux bootstrap" rm -rf "$TERMUX_BOOTSTRAP_PATH"
		fi
		mkdir -p "$(dirname "$TERMUX_BOOTSTRAP_PATH")"
		run "Download Termux bootstrap" wget "https://github.com/${SOURCE}/releases/latest/download/bootstrap-${BOOTSTRAP_ARCH}.zip" -q --show-progress -O "$TERMUX_BOOTSTRAP_PATH"
	fi

	if ! run -n "Verify SHA256 of bootstrap" [ "$(wget -qO- "https://github.com/${SOURCE}/releases/latest/download/CHECKSUMS-sha256.txt" | awk "\$1 == \"bootstrap-${BOOTSTRAP_ARCH}.zip\" {printf(\$2)}")" =  "$(sha256sum "$TERMUX_BOOTSTRAP_PATH" | awk "{printf(\$1)}")" ]; then
		if run "Remove corrupted/expired bootstrap" rm -f "$TERMUX_BOOTSTRAP_PATH"; then
			info "Restart script"
			exec "$(realpath -- "$0")" "${ARGS[@]}"
		fi
	fi

	mkdir -p "$TERMUX_ROOTFS_PATH"
	run "Extract Termux bootstrap" unzip -oq "$TERMUX_BOOTSTRAP_PATH" -d "$TERMUX_ROOTFS_PATH"
	mkdir -p "${TERMUX_ROOTFS_PATH}/home" "${TERMUX_ROOTFS_PATH}/var/cache"

	info "Create symlinks"
	while read -r LINK; do
		if ! (IFS="←" && read -r SRC DEST <<< "$LINK" && ln -sf "$SRC" "${TERMUX_ROOTFS_PATH}/${DEST}"); then
			error "Create symlinks"
		fi
	done < "${TERMUX_ROOTFS_PATH}/SYMLINKS.txt"
	ok "Create $(wc -l < "${TERMUX_ROOTFS_PATH}/SYMLINKS.txt") symlinks"
	rm "${TERMUX_ROOTFS_PATH}/SYMLINKS.txt"

	if [ "$UNAME" == "GNU/Linux" ]; then
		tit_install_system
	fi
}

tit_install_system() {
	local TOYBOX="${TMPDIR}/toybox-${TOYBOX_ARCH}"
	local TOYBOX_URL="https://landley.net/toybox/downloads/binaries/latest/toybox-${TOYBOX_ARCH}"

	if [ -f "$TOYBOX" ]; then
		info "Use cached Toybox binary"
	else
		if [ -e "$TOYBOX" ]; then
			run "Remove Toybox binary" rm -rf "$TOYBOX"
		fi
		mkdir -p "$(dirname "$TOYBOX")"
		run "Download Toybox binary" wget "$TOYBOX_URL" -q --show-progress -O "$TOYBOX"
	fi

	if ! run -n "Verify size of Toybox binary" [ "$(wget --spider "$TOYBOX_URL" 2>&1 | awk "\$1 == \"Length:\" {printf(\$2)}")" = "$(wc -c "$TOYBOX" | awk "{printf(\$1)}")" ] || {
		[ ! -x "$TOYBOX" ] && run "Grant execute permission" chmod +x "$TOYBOX"
		! run -n "Verify functionality of Toybox" [ "$("$TOYBOX" echo "hello world")" = "hello world" ]
	}; then
		if run "Remove corrupted Toybox bianry" rm -f "$TOYBOX"; then
			info "Restart script"
			exec "$(realpath -- "$0")" "${ARGS[@]}"
		fi
	fi

	local BIONIC_HOST BIONIC_HOST_URL BIONIC_HOST_SHA256
	if [ "$TERMUX_PACMAN" = false ]; then
		local APT_PKGSFILE="${TMPDIR}/termux-apt-binary-${BOOTSTRAP_ARCH}-Packages"
		if ! wget "${TERMUX_MIRROR_APT}/dists/stable/main/binary-${BOOTSTRAP_ARCH}/Packages" -q -O "$APT_PKGSFILE"; then
			error "Download Termux APT database"
		fi

		BIONIC_HOST="${TMPDIR}/bionic-host-${BOOTSTRAP_ARCH}.deb"
		#shellcheck disable=SC1090
		. <(awk "
			\$0 == \"Package: bionic-host\" {f=1}
			f {
				if (\$1 == \"Filename:\") filename=\$2
				else if (\$1 == \"SHA256:\") sha256=\$2
				if (filename && sha256) {
					printf(\"BIONIC_HOST_URL=%s/%s BIONIC_HOST_SHA256=%s\", \"$TERMUX_MIRROR_APT\", filename, sha256)
					exit
				}
			}
		" "$APT_PKGSFILE")
	else
		local PACMAN_DBFILE="${TMPDIR}/termux-pacman-main-${BOOTSTRAP_ARCH}.db"
		if ! wget "${TERMUX_MIRROR_PACMAN}/${BOOTSTRAP_ARCH}/main.db" -q -O "$PACMAN_DBFILE"; then
			error "Download Termux Pacman database"
		fi

		local BIONIC_HOST_PACMAN_VER
		if ! BIONIC_HOST_PACMAN_VER="$(tar -tf "$PACMAN_DBFILE" | grep -m1 -E "^bionic-host-[^-]+-[^-]+/\$")"; then
			error "Get version of bionic-host"
		fi
		BIONIC_HOST_PACMAN_VER="${BIONIC_HOST_PACMAN_VER%/}"

		BIONIC_HOST="${TMPDIR}/bionic-host-${BOOTSTRAP_ARCH}$(printf "%s" "$BIONIC_HOST_URL" | grep -o "\.pkg\.tar\.[^\.]\+\$")"
		#shellcheck disable=SC1090
		. <(tar -xOf "$PACMAN_DBFILE" "$BIONIC_HOST_PACMAN_VER/desc" | awk "
			{
				if (filename_flag) {
					filename=\$0
					filename_flag=0
				} else if (sha256_flag) {
					sha256=\$0
					sha256_flag=0
				} else {
					if (\$0 == \"%FILENAME%\") filename_flag=1
					else if (\$0 == \"%SHA256SUM%\") sha256_flag=1
				}

				if (filename && sha256) {
					printf(\"BIONIC_HOST_URL=%s/%s/%s BIONIC_HOST_SHA256=%s\", \"$TERMUX_MIRROR_PACMAN\", \"$BOOTSTRAP_ARCH\", filename, sha256)
					exit
				}
			}
		")
	fi

	if [ -z "$BIONIC_HOST_URL" ] || [ -z "$BIONIC_HOST_SHA256" ]; then
		error "Get download information about bionic-host"
	fi

	if [ -f "$BIONIC_HOST" ]; then
		info "Use cached bionic-host"
	else
		if [ -e "$BIONIC_HOST" ]; then
			run "Remove bionic-host" rm -rf "$BIONIC_HOST"
		fi
		mkdir -p "$(dirname "$BIONIC_HOST")"
		run "Download bionic-host" wget "$BIONIC_HOST_URL" -q --show-progress -O "$BIONIC_HOST"
	fi

	if ! run -n "Verify SHA256 of bionic-host" [ "$BIONIC_HOST_SHA256" =  "$(sha256sum "$BIONIC_HOST" | awk "{printf(\$1)}")" ]; then
		if run "Remove corrupted/expired bionic-host" rm -f "$BIONIC_HOST"; then
			info "Restart script"
			exec "$(realpath -- "$0")" "${ARGS[@]}"
		fi
	fi

	if [ "$TERMUX_PACMAN" = false ]; then
		local BIONIC_HOST_APT_DATA_TAR
		if ! BIONIC_HOST_APT_DATA_TAR="$(ar -t "$BIONIC_HOST" | grep -m1 -E "^data\.tar\.[gx]z$")"; then
			error "Find data.tar.xz or similar"
		fi
		local BIONIC_HOST_APT_CONTROL_TAR
		if ! BIONIC_HOST_APT_CONTROL_TAR="$(ar -t "$BIONIC_HOST" | grep -m1 -E "^control\.tar\.[gx]z$")"; then
			error "Find control.tar.xz or similar"
		fi

		local BIONIC_HOST_APT_DATA_DIR="${TMPDIR}/bionic-host-${BOOTSTRAP_ARCH}-apt-data"
		if [ -e "$BIONIC_HOST_APT_DATA_DIR" ]; then
			run "Remove unpacked bionic-host/data" rm -rf "$BIONIC_HOST_APT_DATA_DIR"
		fi
		mkdir -p "$BIONIC_HOST_APT_DATA_DIR"
		ar -p "$BIONIC_HOST" "$BIONIC_HOST_APT_DATA_TAR" | run "Unpack bionic-host/data" tar -xJ -C "$BIONIC_HOST_APT_DATA_DIR"

		local BIONIC_HOST_APT_CONTROL_DIR="${TMPDIR}/bionic-host-${BOOTSTRAP_ARCH}-apt-control"
		if [ -e "$BIONIC_HOST_APT_CONTROL_DIR" ]; then
			run "Remove unpacked bionic-host/control" rm -rf "$BIONIC_HOST_APT_CONTROL_DIR"
		fi
		mkdir -p "$BIONIC_HOST_APT_CONTROL_DIR"
		ar -p "$BIONIC_HOST" "$BIONIC_HOST_APT_CONTROL_TAR" | run "Unpack bionic-host/control" tar -xJ -C "$BIONIC_HOST_APT_CONTROL_DIR"

		info "Register bionic-host"
		if ! (
			cd "$BIONIC_HOST_APT_DATA_DIR"\
				&& find ./ | sed -E -e 's,^\./,/,' -e "s,^/\$,/.," > "${TERMUX_ROOTFS_PATH}/var/lib/dpkg/info/bionic-host.list"\
				&& find . -type f -printf "%P\0" | xargs -0 md5sum > "${TERMUX_ROOTFS_PATH}/var/lib/dpkg/info/bionic-host.md5sums"
		) || ! (
			cd "$BIONIC_HOST_APT_CONTROL_DIR"\
				&& { cat "control"; printf "Status: install ok installed\n\n"; } >> "${TERMUX_ROOTFS_PATH}/var/lib/dpkg/status"\
				&& for CONTROL_FILE in conffiles postinst postrm preinst prerm; do
					if [ -f "$CONTROL_FILE" ]; then
						cp -f "$CONTROL_FILE" "${TERMUX_ROOTFS_PATH}/var/lib/dpkg/info/bionic-host.${CONTROL_FILE}" || return 1
					fi
				done
		); then
			error "Register bionic-host"
		fi
		ok "Register bionic-host"

		info "Install bionic-host"
		if ! (
			cd "${BIONIC_HOST_APT_DATA_DIR}/data/data/com.termux/files/usr"\
				&& find . -type d -exec mkdir -p "$TERMUX_ROOTFS_PATH"/{} \;\
				&& find . -type f -exec mv -f {} "$TERMUX_ROOTFS_PATH"/{} \;
		); then
			error "Install bionic-host"
		fi
		ok "Install bionic-host"

		rm -rf "$BIONIC_HOST_APT_DATA_DIR" "$BIONIC_HOST_APT_CONTROL_DIR"
	else
		local BIONIC_HOST_PACMAN_DIR="${TMPDIR}/bionic-host-${BOOTSTRAP_ARCH}-pacman"
		if [ -e "$BIONIC_HOST_PACMAN_DIR" ]; then
			run "Remove unpacked bionic-host" rm -rf "$BIONIC_HOST_PACMAN_DIR"
		fi
		mkdir -p "$BIONIC_HOST_PACMAN_DIR"
		run "Unpack bionic-host" tar -xf "$BIONIC_HOST" -C "$BIONIC_HOST_PACMAN_DIR"

		info "Register bionic-host"
		if ! (
			cd "$BIONIC_HOST_PACMAN_DIR"\
				&& mkdir -p "${TERMUX_ROOTFS_PATH}/var/lib/pacman/local/${BIONIC_HOST_PACMAN_VER}"\
				&& cp -f ".MTREE" "${TERMUX_ROOTFS_PATH}/var/lib/pacman/local/${BIONIC_HOST_PACMAN_VER}/mtree"\
				&& { [ -f ".INSTALL" ] && cp -f ".INSTALL" "${TERMUX_ROOTFS_PATH}/var/lib/pacman/local/${BIONIC_HOST_PACMAN_VER}/install" || true; }
		) || ! tar -xOf "$PACMAN_DBFILE" "$BIONIC_HOST_PACMAN_VER/desc" > "${TERMUX_ROOTFS_PATH}/var/lib/pacman/local/${BIONIC_HOST_PACMAN_VER}/desc"; then
			error "Register bionic-host"
		fi
		ok "Register bionic-host"

		info "Install bionic-host"
		if ! (
			cd "$BIONIC_HOST_PACMAN_DIR/data/data/com.termux/files/usr"\
				&& find . -type d -exec mkdir -p "$TERMUX_ROOTFS_PATH"/{} \;\
				&& find . -type f -exec mv -f {} "$TERMUX_ROOTFS_PATH"/{} \;
		); then
			error "Install bionic-host"
		fi
		ok "Install bionic-host"

		rm -rf "$BIONIC_HOST_PACMAN_DIR"
	fi
	run "Link bionic-host" ln -sf "opt/bionic-host" "$TERMUX_ROOTFS_PATH/system"

	mkdir -p "${TERMUX_ROOTFS_PATH}/system/bin"
	run "Copy Toybox to Termux" cp -f "$TOYBOX" "${TERMUX_ROOTFS_PATH}/system/bin/toybox"
	info "Install Toybox commands"
	for COMMAND in $("${TERMUX_ROOTFS_PATH}/system/bin/toybox"); do
		ln -sf toybox "${TERMUX_ROOTFS_PATH}/system/bin/${COMMAND}" || error "Install Toybox commands"
	done
	ok "Install Toybox commands"
}

tit_login() {
	local WORKDIR="${TERMUX_FILES_PATH}/home"
	local BINDS=()
	if [ "$UNAME" = "Android" ]; then
		for BIND in /sdcard /system /vendor /apex /data/dalvik-cache /linkerconfig/ld.config.txt; do
			if [ -e "$BIND" ]; then
				BINDS+=("$BIND")
			fi
		done
	fi

	local INTERACTIVE=true
	while [ "$#" != 0 ]; do
		case "$1" in
			--32-bit)
				TERMUX_32_BIT=true
				;;
			-p|--pacman)
				TERMUX_PACMAN=true
				;;
			-b|--bind)
				if [ "$#" = 1 ]; then
					usage "Missing parameter: '--bind'"
				fi
				shift
				if [ -z "$1" ]; then
					error "Invalid path: ''"
				fi
				BINDS+=("$1")
				;;
			-w|--workdir)
				if [ "$#" = 1 ]; then
					usage "Missing parameter: '--workdir'"
				fi
				shift
				if [ -z "$1" ]; then
					error "Invalid path: ''"
				fi
				WORKDIR="$1"
				;;
			--)
				shift
				INTERACTIVE=false
				break
				;;
			*)
				usage "Unrecognized option: '$1'"
				;;
		esac
		shift
	done
	tit_set_vars

	if ! tit_check_installed; then
		error "System not installed"
	fi

	BINDS=(/dev /proc /sys "${PREFIX:-/usr}/..:/host-rootfs"
		"${TERMUX_ROOTFS_PATH}:${TERMUX_FILES_PATH}/usr"
		"${TERMUX_ROOTFS_PATH}/home:${TERMUX_FILES_PATH}/home"
		"${TERMUX_ROOTFS_PATH}/var/cache:${TERMUX_APP_PATH}/cache"
		"${BINDS[@]}"
	)

	local CMDLINE=()
	if proot --help | grep -q -- "--kill-on-exit"; then
		CMDLINE+=("--kill-on-exit")
	fi

	CMDLINE+=(-r "$TERMUX_ROOTFS_PATH" -w "$WORKDIR")
	for BIND in "${BINDS[@]}"; do
		CMDLINE+=(-b "$BIND")
	done

	CMDLINE+=("${TERMUX_FILES_PATH}/usr/bin/env" -i
		"HOME=${TERMUX_FILES_PATH}/home"
		"PATH=${TERMUX_FILES_PATH}/usr/bin"
		"PREFIX=${TERMUX_FILES_PATH}/usr"
		"TMPDIR=${TERMUX_FILES_PATH}/usr/tmp"
		"ANDROID_DATA=/data"
		"ANDROID_ROOT=/system"
		"EXTERNAL_STORAGE=/sdcard"
		"LD_PRELOAD=${TERMUX_FILES_PATH}/usr/lib/libtermux-exec.so"
		"LD_LIBRARY_PATH=${TERMUX_FILES_PATH}/usr/lib"
		"TERM=${TERM=-xterm-256color}"
		"COLORTERM=${TERM=-truecolor}"
		"LANG=${LANG=-en_US.UTF-8}"
		"TERMUX_APK_RELEASE=${TERMUX_APK_RELEASE}"
		"TERMUX_VERSION=${TERMUX_VERSION}"
	)
	if [ -n "${TERMUX_API_VERSION}" ]; then
		CMDLINE+=("TERMUX_API_VERSION=${TERMUX_API_VERSION}")
	fi

	if [ "$INTERACTIVE" = true ]; then
		CMDLINE+=("${TERMUX_FILES_PATH}/usr/bin/login")
	else
		if [ "$#" = 0 ]; then
			usage "Missing parameter: '--'"
		fi
		CMDLINE+=("$@")
	fi

	unset LD_PRELOAD
	exec proot "${CMDLINE[@]}"
}

tit_remove() {
	local ASK=true
	while [ "$#" != 0 ]; do
		case "$1" in
			--32-bit)
				TERMUX_32_BIT=true
				;;
			-p|--pacman)
				TERMUX_PACMAN=true
				;;
			-y|--yes)
				ASK=false
				;;
			*)
				usage "Unrecognized option: '$1'"
				;;
		esac
		shift
	done
	tit_set_vars

	if ! tit_check_installed -n; then
		error "System not installed"
	fi

	local KEY
	if [ "$ASK" = true ]; then
		info "Remove system ($(basename "$TERMUX_ROOTFS_PATH"))? [Y/n]"
		read -rsn1 -t5 KEY
	else
		KEY="Y"
	fi
	if [ "${KEY^^}" = "N" ]; then
		error "Abort"
	fi
	if ! rm -rf "$TERMUX_ROOTFS_PATH"; then
		error "Remove system"
	fi
	ok "Remove system"
}

tit_list() {
	local ONLY_INSTALLED=false
	local SHOW_SIZE=false
	while [ "$#" != 0 ]; do
		case "$1" in
			-i|--installed)
				ONLY_INSTALLED=true
				;;
			-s|--size)
				ONLY_INSTALLED=true
				SHOW_SIZE=true
				;;
			*)
				usage "Unrecognized option: '$1'"
				;;
		esac
		shift
	done

	for TERMUX_ROOTFS_PATH in "$HOME"/termux{,-pacman}-fs{,32}; do
		if [ "$IS64" != true ] && strcmp "*32" "$TERMUX_ROOTFS_PATH"; then
			continue
		fi
		if tit_check_installed; then
			if [ "$SHOW_SIZE" = true ]; then
				printf "${GREEN}%s${DEFAULT} ${BLUE}%s${DEFAULT}\n" "$(basename "$TERMUX_ROOTFS_PATH")" "$(du -sh "$TERMUX_ROOTFS_PATH" 2>/dev/null | awk "{printf(\$1)}")"
			else
				printf "${GREEN}%s${DEFAULT}\n" "$(basename "$TERMUX_ROOTFS_PATH")"
			fi
		elif [ "$ONLY_INSTALLED" = false ]; then
			printf "${RED}%s${DEFAULT}\n" "$(basename "$TERMUX_ROOTFS_PATH")"
		fi
	done
}

tit_backup() {
	local DEST=""
	local FORCE=false
	while [ "$#" != 0 ]; do
		case "$1" in
			--32-bit)
				TERMUX_32_BIT=true
				;;
			-p|--pacman)
				TERMUX_PACMAN=true
				;;
			-f|--force)
				FORCE=true
				;;
			-o|--output)
				if [ "$#" = 1 ]; then
					usage "Missing parameter: '--output'"
				fi
				shift
				if [ -z "$1" ]; then
					error "Invalid destination: ''"
				elif [ "$DEST" != "" ]; then
					error "Set option: '--output'"
				fi
				DEST="$1"
				;;
			*)
				usage "Unrecognized option: '$1'"
				;;
		esac
		shift
	done
	tit_set_vars

	if ! tit_check_installed; then
		error "System not installed"
	elif [ -z "$DEST" ]; then
		usage "Unset option: '--output'"
	elif [ -e "$DEST" ]; then
		if [ "$FORCE" != true ]; then
			error "Destination exists"
		fi
		run "Remove destination" rm -rf "$DEST"
	fi

	info "Generate metadata"
	local METADATA="${TMPDIR}/tit_metadata"
	printf "%s=\"%s\"\n" "TERMUX_32_BIT" "$TERMUX_32_BIT"\
		"TERMUX_PACMAN" "$TERMUX_PACMAN"\
		"BACKUP_HOST_ARCH" "$ARCH"\
		"BACKUP_HOST_UNAME" "$UNAME" > "$METADATA"
	ok "Generate metadata"
	info "Backup sandbox"

	#shellcheck disable=SC2317
	cleanup() {
		rm -f "$DEST"
	}

	if ! tar -cf "$DEST" -C "$(dirname "$METADATA")" "$(basename "$METADATA")" -C "$(dirname "$TERMUX_ROOTFS_PATH")" "$(basename "$TERMUX_ROOTFS_PATH")" &>/dev/null; then
			error "Backup sandbox"
		fi
	ok "Backup sandbox to '${DEST}'"

	unset cleanup
}

tit_restore() {
	local ASK=""
	local ARCHIVE=""
	while [ "$#" != 0 ]; do
		case "$1" in
			-y|--yes)
				local ASK="--yes"
				;;
			-a|--archive)
				if [ "$#" = 1 ]; then
					usage "Missing parameter: '--archive'"
				fi
				shift
				if [ -z "$1" ]; then
					error "Invalid archive: ''"
				elif [ "$ARCHIVE" != "" ]; then
					error "Set option: '--archive'"
				fi
				ARCHIVE="$1"
				;;
			*)
				usage "Unrecognized option: '$1'"
				;;
		esac
		shift
	done

	if [ -z "$ARCHIVE" ]; then
		error "Unset option: '--archive'"
	elif [ ! -f "$ARCHIVE" ]; then
		error "Invalid archive"
	elif [ ! -r "$ARCHIVE" ]; then
		error "Archive unreadable"
	fi
	# shellcheck source=/dev/null
	. <(tar -xOf "$ARCHIVE" tit_metadata 2>/dev/null | sed "s/^/local " || printf "error \"Broken archive\"\n")
	if [ "$ARCH" != "$BACKUP_HOST_ARCH" ]; then
		error "Device architectures mismatch ('${ARCH}' != '${BACKUP_HOST_ARCH}')"
	elif [ "$UNAME" != "$BACKUP_HOST_UNAME" ]; then
		error "Operating systems mismatch ('${UNAME}' != '${BACKUP_HOST_UNAME}')"
	fi
	tit_set_vars

	if tit_check_installed -n; then
		local PRESERVE=true
		tit_remove $ASK
	fi
	mkdir -p "$TERMUX_ROOTFS_PATH"
	info "Restore system"

	#shellcheck disable=SC2317
	cleanup() {
		rm -rf "$TERMUX_ROOTFS_PATH"
	}

	if ! tar -xf "$ARCHIVE" -C "$TERMUX_ROOTFS_PATH" --strip-components 1 "$(basename "$TERMUX_ROOTFS_PATH")" &>/dev/null; then
		error "Restore system"
	fi
	ok "Restore system to '$(basename "$TERMUX_ROOTFS_PATH")'"

	unset cleanup
}

ARGS=("$@")
if [ "$#" = 0 ]; then
	usage "No command provided"
fi
case "$1" in
	install)
		shift
		tit_install "$@"
		;;
	login)
		shift
		tit_login "$@"
		;;
	remove)
		shift
		tit_remove "$@"
		;;
	list)
		shift
		tit_list "$@"
		;;
	backup)
		shift
		tit_backup "$@"
		;;
	restore)
		shift
		tit_restore "$@"
		;;
	-h|--help|help)
		usage -ne
		;;
	*)
		error -n "Unrecognized command: '$1'"
		similar "$1" 1>&2
		usage
		;;
esac
