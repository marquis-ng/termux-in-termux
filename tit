#!/bin/bash
TERMUX_ROOTFS_PATH="$(realpath -- "$HOME/termux-fs")"
TERMUX_BOOTSTRAP_PATH="$(realpath -- "${TMPDIR:-/tmp}/termux-fs.zip")"
TERMUX_APP_PATH="/data/data/com.termux"
TERMUX_FILES_PATH="$TERMUX_APP_PATH/files"
TERMUX_32_BIT=false
TERMUX_PACMAN=false

info() {
	printf "\033[36m[!] %b\033[0m\n" "$*"
}

error() {
	local EXIT=true
	if [ "$1" = "-n" ]; then
		EXIT=false
		shift
	fi
	printf "\033[1;31m[x] %b\033[0m\n" "$*" 1>&2
	if [ "$EXIT" = true ]; then
		exit 1
	fi
	return 1
}

ok() {
	printf "\033[32m[✓] %b\033[0m\n" "$*"
}

run() {
	local ACTION="$1"
	shift
	info "$ACTION"
	if ! "$@"; then
		error "$ACTION"
	fi
	ok "$ACTION"
}

trap "error \"Received SIGINT\"" INT

usage() {
	local EXITCODE=1
	# shellcheck disable=SC2155
	local PROGNAME="$(basename -- "$0")"
	if [ "$1" = "-ne" ]; then
		EXITCODE=0
		shift
	fi
	if [ "$#" != 0 ]; then
		error -n "$@" 1>&2
		printf "\n" 1>&2
	fi
	printf "%b\033[0m\n" "\033[1;33mTermux-in-Termux (by marquis-ng)"\
		"\033[2mAn isolated environment of Termux inside Termux."\
		"\033[2mGitHub: https://github.com/marquis-ng/termux-in-termux\n"\
		"\033[1;33mUsage:"\
		"  \033[32m$PROGNAME \033[22;35mCOMMAND \033[36m{ARGS[]}"\
		"  \033[32m$PROGNAME \033[22;35m[-h,--help,help]\n"\
		"\033[1;33mCommands:"\
		"  \033[35minstall \033[36m[--32-bit | -p,--pacman | --reset]"\
		"      \033[34mInstall the sandbox."\
		"  \033[35mlogin \033[36m[--32-bit | -p,--pacman | -b,--bind {DIR | FILE} |\n          -w,--workdir {DIR}] [-- {CMD[]}]"\
		"      \033[34mLogin the sandbox."\
		"  \033[35mremove \033[36m[--32-bit | -p,--pacman | -y,--yes]"\
		"      \033[34mRemove the sandbox."\
		"  \033[35mlist \033[36m[-i,--installed | -s,--size]"\
		"      \033[34mShow disk usage for each sandbox."\
		"  \033[35mbackup \033[36m[--32-bit | -p,--pacman | -f,--force] -o,--output {FILE}"\
		"      \033[34mBackup the sandbox."\
		"  \033[35mrestore \033[36m[-y,--yes] -a,--archive {FILE}"\
		"      \033[34mRestore a backup made by the program." 1>&2
	exit "$EXITCODE"
}

UNAME="$(uname -o)"
if [ "$UNAME"  != "Android" ]; then
	error "Unsupported platform: '$UNAME'"
fi

if [ "$(id -u)" = 0 ]; then
	error "Detected root (UID=0)"
fi

for DEP in wget unzip proot; do
	if ! command -v "$DEP" > /dev/null; then
		error "Command not found: '$DEP'"
	fi
done

ARCH="$(uname -m)"
case "$ARCH" in
	aarch64|arm64)
		ARCH="aarch64"
		IS64=true
		;;
	arm|armel|armhf|armhfp|armv7|armv7l|armv7a|armv8l)
		ARCH="arm"
		IS64=false
		;;
	x86_64|amd64)
		ARCH="x86_64"
		IS64=true
		;;
	x86|i*86)
		ARCH="i686"
		IS64=false
		;;
	*)
		error "Unsupported architecture: $ARCH"
		;;
esac

tit_check_installed() {
	if [ "$(find "$TERMUX_ROOTFS_PATH" -mindepth 1 -maxdepth 1 2>/dev/null | wc -l)" = 0 ]; then
		return 1
	else
		return 0
	fi
}

tit_set_vars() {
	if [ "$PRESERVE" = true ]; then
		return 0
	fi
	SOURCE="termux/termux-packages"
	if [ "$TERMUX_PACMAN" = true ]; then
		FPREFIX="${TERMUX_ROOTFS_PATH%termux*}"
		FSUFFIX="${TERMUX_ROOTFS_PATH#"$FPREFIX"}"
		TERMUX_ROOTFS_PATH="$FPREFIX${FSUFFIX/termux/termux-pacman}"
		FPREFIX="${TERMUX_BOOTSTRAP_PATH%termux*}"
		FSUFFIX="${TERMUX_BOOTSTRAP_PATH#"$FPREFIX"}"
		TERMUX_BOOTSTRAP_PATH="$FPREFIX${FSUFFIX/termux/termux-pacman}"
		SOURCE="termux-pacman/termux-packages"
	fi

	if [ "$TERMUX_32_BIT" = true ]; then
		if [ "$IS64" != true ]; then
			error "Unsupported option: '--32-bit'"
		fi
		TERMUX_ROOTFS_PATH+="32"
		TERMUX_BOOTSTRAP_PATH="${TERMUX_BOOTSTRAP_PATH%.zip}32.zip"
		if [ "$ARCH" = "aarch64" ]; then
			BOOTSTRAP_ARCH="arm"
		else
			BOOTSTRAP_ARCH="i686"
		fi
	else
		BOOTSTRAP_ARCH="$ARCH"
	fi
}

tit_install() {
	local RESET=false
	while [ "$#" != 0 ]; do
		case "$1" in
			--32-bit)
				TERMUX_32_BIT=true
				;;
			-p|--pacman)
				TERMUX_PACMAN=true
				;;
			--reset)
				RESET=true
				;;
			*)
				usage "Unrecognized option: '$1'"
				;;
		esac
		shift
	done
	tit_set_vars

	if tit_check_installed; then
		if [ "$RESET" = false ]; then
			error "Install destination exists"
		fi
		local PRESERVE=true
		tit_remove
	fi

	if [ -f "$TERMUX_BOOTSTRAP_PATH" ]; then
		info "Use cached Termux bootstrap"
	else
		if [ -e "$TERMUX_BOOTSTRAP_PATH" ]; then
			run "Remove Termux bootstrap" rm -rf "$TERMUX_BOOTSTRAP_PATH"
		fi
		mkdir -p "$(dirname "$TERMUX_BOOTSTRAP_PATH")"
		run "Download Termux boostrap" wget "https://github.com/$SOURCE/releases/latest/download/bootstrap-$BOOTSTRAP_ARCH.zip" -q --show-progress -O "$TERMUX_BOOTSTRAP_PATH"
	fi

	if ! run "Verify SHA256" [ "$(wget -qO- https://github.com/$SOURCE/releases/latest/download/bootstraps.sha256sum | awk "\$2 == \"bootstrap-$ARCH.zip\" {printf(\$1)}")" =  "$(sha256sum "$TERMUX_BOOTSTRAP_PATH" | awk "{printf(\$1)}")" ]; then
		if run "Remove corrupted/expired bootstrap" rm -f "$TERMUX_BOOTSTRAP_PATH"; then
			info "Restart script"
			exec "$(realpath -- "$0")" "${ARGS[@]}"
		fi
	fi

	mkdir -p "$TERMUX_ROOTFS_PATH"
	run "Extract Termux bootstrap" unzip -q "$TERMUX_BOOTSTRAP_PATH" -d "$TERMUX_ROOTFS_PATH"

	info "Create symlinks"
	while read -r LINK; do
		if ! (IFS="←" && read -r SRC DEST <<< "$LINK" && ln -sf "$SRC" "$TERMUX_ROOTFS_PATH/$DEST"); then
			error "Create symlinks"
		fi
	done < "$TERMUX_ROOTFS_PATH/SYMLINKS.txt"
	ok "Create $(wc -l < "$TERMUX_ROOTFS_PATH/SYMLINKS.txt") symlinks"
	rm "$TERMUX_ROOTFS_PATH/SYMLINKS.txt"
	mkdir -p "$TERMUX_ROOTFS_PATH/home" "$TERMUX_ROOTFS_PATH/var/cache"
}

tit_login() {
	local TERMUX_PROOT_ARGS=()
	local INTERACTIVE=true
	while [ "$#" != 0 ]; do
		case "$1" in
			--32-bit)
				TERMUX_32_BIT=true
				;;
			-p|--pacman)
				TERMUX_PACMAN=true
				;;
			-b|--bind)
				if [ "$#" = 1 ]; then
					usage "Missing parameter: '--bind'"
				fi
				shift
				if [ -z "$1" ]; then
					error "Invalid path: ''"
				fi
				TERMUX_PROOT_ARGS+=("-b" "$1")
				;;
			-w|--workdir)
				if [ "$#" = 1 ]; then
					usage "Missing parameter: '--workdir'"
				fi
				shift
				if [ -z "$1" ]; then
					error "Invalid path: ''"
				fi
				TERMUX_PROOT_ARGS+=("-w" "$1")
				;;
			--)
				shift
				INTERACTIVE=false
				break
				;;
			*)
				usage "Unrecognized option: '$1'"
				;;
		esac
		shift
	done
	tit_set_vars

	if ! tit_check_installed; then
		error "System not installed"
	fi
	local CMDLINE=(proot --kill-on-exit -r "$TERMUX_ROOTFS_PATH" -w "$TERMUX_FILES_PATH/home")
	if [ "${#TERMUX_PROOT_ARGS[@]}" != 0 ]; then
		CMDLINE+=("${TERMUX_PROOT_ARGS[@]}")
	fi

	for FILE in /dev /proc /sys /system /vendor /apex /sdcard "${PREFIX:-/usr}/..:/host-rootfs" /data/dalvik-cache /linkerconfig/ld.config.txt; do
		if [ -e "${FILE%:*}" ]; then
			CMDLINE+=(-b "$FILE")
		fi
	done

	CMDLINE+=(-b "$TERMUX_ROOTFS_PATH:$TERMUX_FILES_PATH/usr"
		-b "$TERMUX_ROOTFS_PATH/home:$TERMUX_FILES_PATH/home"
		-b "$TERMUX_ROOTFS_PATH/var/cache:$TERMUX_APP_PATH/cache"
	)

	CMDLINE+=("$TERMUX_FILES_PATH/usr/bin/env" -i
		"HOME=$TERMUX_FILES_PATH/home"
		"PATH=$TERMUX_FILES_PATH/usr/bin"
		"PREFIX=$TERMUX_FILES_PATH/usr"
		"TMPDIR=$TERMUX_FILES_PATH/usr/tmp"
		"ANDROID_DATA=/data"
		"ANDROID_ROOT=/system"
		"EXTERNAL_STORAGE=/sdcard"
		"LD_PRELOAD=$TERMUX_FILES_PATH/usr/lib/libtermux-exec.so"
		"LD_LIBRARY_PATH=$TERMUX_FILES_PATH/usr/lib"
		"TERM=${TERM=-xterm-256color}"
		"COLORTERM=${TERM=-truecolor}"
		"LANG=${LANG=-en_US.UTF-8}"
		"TERMUX_APK_RELEASE=$TERMUX_APK_RELEASE"
		"TERMUX_VERSION=$TERMUX_VERSION"
	)
	if [ -n "${TERMUX_API_VERSION}" ]; then
		CMDLINE+=("TERMUX_API_VERSION=$TERMUX_API_VERSION")
	fi

	if [ "$INTERACTIVE" = true ]; then
		CMDLINE+=("$TERMUX_FILES_PATH/usr/bin/login")
	else
		if [ "$#" = 0 ]; then
			usage "Missing parameter: '--'"
		fi
		CMDLINE+=("$@")
	fi

	unset LD_PRELOAD
	exec "${CMDLINE[@]}"
}

tit_remove() {
	local ASK=true
	while [ "$#" != 0 ]; do
		case "$1" in
			--32-bit)
				TERMUX_32_BIT=true
				;;
			-p|--pacman)
				TERMUX_PACMAN=true
				;;
			-y|--yes)
				ASK=false
				;;
			*)
				usage "Unrecognized option: '$1'"
				;;
		esac
		shift
	done
	tit_set_vars

	if ! tit_check_installed; then
		error "System not installed"
	fi
	local KEY
	if [ "$ASK" = true ]; then
		info "Remove system ($(basename "$TERMUX_ROOTFS_PATH"))? [Y/n]"
		read -rsn1 -t5 KEY
	else
		KEY="Y"
	fi
	if [ "${KEY^^}" = "N" ]; then
		error "Abort"
	fi
	run "Remove system" rm -rf "$TERMUX_ROOTFS_PATH"
}

tit_list() {
	local ONLY_INSTALLED=false
	while [ "$#" != 0 ]; do
		case "$1" in
			-i|--installed)
				ONLY_INSTALLED=true
				;;
			-s|--size)
				ONLY_INSTALLED=true
				SHOW_SIZE=true
				;;
			*)
				usage "Unrecognized option: '$1'"
				;;
		esac
		shift
	done

	for TERMUX_ROOTFS_PATH in "$HOME"/termux{,-pacman}-fs{,32}; do
		if [ "$IS64" != true ] && printf "%s\n" "$TERMUX_ROOTFS_PATH" | grep -q "32$"; then
			continue
		fi
		if tit_check_installed; then
			if [ "$SHOW_SIZE" = true ]; then
				printf "\033[32m%s\033[0m \033[34m%s\033[0m\n" "$(basename "$TERMUX_ROOTFS_PATH")" "$(du -sh "$TERMUX_ROOTFS_PATH" 2>/dev/null | awk "{printf(\$1)}")"
			else
				printf "\033[32m%s\033[0m\n" "$(basename "$TERMUX_ROOTFS_PATH")"
			fi
		elif [ "$ONLY_INSTALLED" = false ]; then
			printf "\033[31m%s\033[0m\n" "$(basename "$TERMUX_ROOTFS_PATH")"
		fi
	done
}

tit_backup() {
	local DEST=""
	local FORCE=false
	while [ "$#" != 0 ]; do
		case "$1" in
			--32-bit)
				TERMUX_32_BIT=true
				;;
			-p|--pacman)
				TERMUX_PACMAN=true
				;;
			-f|--force)
				FORCE=true
				;;
			-o|--output)
				if [ "$#" = 1 ]; then
					usage "Missing parameter: '--output'"
				fi
				shift
				if [ -z "$1" ]; then
					error "Invalid destination: ''"
				elif [ "$DEST" != "" ]; then
					error "Set option: '--output'"
				fi
				DEST="$1"
				;;
			*)
				usage "Unrecognized option: '$1'"
				;;
		esac
		shift
	done
	tit_set_vars

	if ! tit_check_installed; then
		error "System not installed"
	elif [ -z "$DEST" ]; then
		usage "Unset option: '--output'"
	elif [ -e "$DEST" ]; then
		if [ "$FORCE" != true ]; then
			error "Destination exists"
		fi
		run "Remove destination" rm -rf "$DEST"
	fi

	info "Generate metadata"
	local METADATA="${TMPDIR:-/tmp}/tit_metadata"
	printf "%s=\"%s\"\n" "TERMUX_32_BIT" "$TERMUX_32_BIT"\
		"TERMUX_PACMAN" "$TERMUX_PACMAN"\
		"BACKUP_HOST_ARCH" "$ARCH" > "$METADATA"
	ok "Generate metadata"
	info "Backup sandbox"
	if ! tar -cf "$DEST" -C "$(dirname "$METADATA")" "$(basename "$METADATA")" -C "$(dirname "$TERMUX_ROOTFS_PATH")" "$(basename "$TERMUX_ROOTFS_PATH")" &>/dev/null; then
			error "Backup sandbox"
		fi
	ok "Backup sandbox to '$DEST'"
}

tit_restore() {
	local ARCHIVE=""
	while [ "$#" != 0 ]; do
		case "$1" in
			-y|--yes)
				local ASK="--yes"
				;;
			-a|--archive)
				if [ "$#" = 1 ]; then
					usage "Missing parameter: '--archive'"
				fi
				shift
				if [ -z "$1" ]; then
					error "Invalid archive: ''"
				elif [ "$ARCHIVE" != "" ]; then
					error "Set option: '--archive'"
				fi
				ARCHIVE="$1"
				;;
			*)
				usage "Unrecognized option: '$1'"
				;;
		esac
		shift
	done

	if [ -z "$ARCHIVE" ]; then
		error "Unset option: '--archive'"
	elif [ ! -f "$ARCHIVE" ]; then
		error "Invalid archive"
	elif [ ! -r "$ARCHIVE" ]; then
		error "Archive unreadable"
	fi
	# shellcheck source=/dev/null
	. <(tar -xOf "$ARCHIVE" tit_metadata 2>/dev/null || printf "error \"Broken archive\"\n")
	if [ "$ARCH" != "$BACKUP_HOST_ARCH" ]; then
		error "Device architectures mismatch ('$ARCH' != '$BACKUP_HOST_ARCH')"
	fi
	tit_set_vars

	if tit_check_installed; then
		local PRESERVE=true
		tit_remove $ASK
	fi
	mkdir -p "$TERMUX_ROOTFS_PATH"
	info "Restore system"
	if ! tar -xf "$ARCHIVE" -C "$TERMUX_ROOTFS_PATH" --strip-components 1 "$(basename "$TERMUX_ROOTFS_PATH")" &>/dev/null; then
		error "Restore system"
	fi
	ok "Restore system to '$(basename "$TERMUX_ROOTFS_PATH")'"
}

ARGS=("$@")
if [ "$#" = 0 ]; then
	usage "No command provided"
fi
case "$1" in
	install)
		shift
		tit_install "$@"
		;;
	login)
		shift
		tit_login "$@"
		;;
	remove)
		shift
		tit_remove "$@"
		;;
	list)
		shift
		tit_list "$@"
		;;
	backup)
		shift
		tit_backup "$@"
		;;
	restore)
		shift
		tit_restore "$@"
		;;
	-h|--help|help)
		usage -ne
		;;
	*)
		usage "Unrecognized command: '$1'"
		;;
esac
