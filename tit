#!/bin/bash
TERMUX_ROOTFS_PATH="$(realpath -- "$HOME/termux-fs")"
TERMUX_BOOTSTRAP_PATH="$(realpath -- "${TMPDIR:-/tmp}/termux-fs.zip")"
TERMUX_APP_PATH="/data/data/com.termux"
TERMUX_FILES_PATH="$TERMUX_APP_PATH/files"
TERMUX_32_BIT=false
TERMUX_PACMAN=false

info() {
	printf "\033[1;36m%b\033[0m\n" "$@"
}

error() {
	printf "\033[1;31m%b\033[0m\n" "$@" 1>&2
	exit 1
}

usage() {
	local EXITCODE=1
	# shellcheck disable=SC2155
	local PROGNAME="$(basename -- "$0")"
	if [ "$1" = "-ne" ]; then
		EXITCODE=0
		shift
	fi
	if [ "$#" != 0 ]; then
		printf "\033[1;31m%b\033[0m\n" "$@" "" 1>&2
	fi
	printf "%b\033[0m\n" "\033[1;36mTermux-in-Termux \033[34m(by \033[32mmarquis-ng\033[34m)"\
	"\033[33mAn isolated environment of Termux inside Termux."\
	"\033[35mGitHub: https://github.com/marquis-ng/termux-in-termux\n"\
	"\033[1;36mUsage:"\
	"  \033[1;32m$PROGNAME \033[22;31mCOMMAND \033[33m[--32-bit | -p,--pacman] [args]"\
	"  \033[1;32m$PROGNAME \033[22;31m-h"\
	"  \033[1;32m$PROGNAME \033[22;31m--help"\
	"    \033[33m--32-bit\033[0m: \033[34mInstall Termux with 32-bit prefix."\
	"        \033[35m(Only works on 64-bit devices!)"\
	"    \033[33m--pacman\033[0m: \033[34mUse Termux bootstrap with Pacman instead of APT.\n"\
	"\033[1;36mCommands:"\
	"  \033[31minstall \033[33m[--reset]"\
	"      \033[34mInstall Termux-in-Termux sandbox."\
	"  \033[31mlogin \033[33m[-b,--bind [DIR | FILE] | -w,--workdir [DIR]] [-- [CMD]]"\
	"      \033[34mLogin the sandbox."\
	"  \033[31mremove \033[33m[-y,--yes]"\
	"      \033[34mRemove the sandbox."\
	"  \033[31mdu \033[33m[-i,--installed]"\
	"      \033[34mShow disk usage for each sandbox." 1>&2
	exit "$EXITCODE"
}

if [ "$(uname -o)"  != "Android" ]; then
	error "This program should only be ran on Termux."
fi

if [ "$(id -u)" = 0 ]; then
	error "This program should not be ran as root."
fi

for DEP in wget unzip proot; do
	if ! command -v "$DEP" > /dev/null; then
		error "\"$DEP\" not found."
	fi
done

case "$(uname -m)" in
	aarch64|arm64)
		ARCH="aarch64"
		IS64=true
		;;
	arm|armel|armhf|armhfp|armv7|armv7l|armv7a|armv8l)
		ARCH="arm"
		IS64=false
		;;
	x86_64|amd64)
		ARCH="x86_64"
		IS64=true
		;;
	x86|i*86)
		ARCH="i686"
		IS64=false
		;;
	*)
		error "Architecture \"$(uname -m)\" not supported."
		;;
esac

tit_check_installed() {
	if [ "$(find "$TERMUX_ROOTFS_PATH" -mindepth 1 -maxdepth 1 2>/dev/null | wc -l)" = 0 ]; then
		return 1
	else
		return 0
	fi
}

tit_set_vars() {
	if [ "$PRESERVE" = true ]; then
		return 0
	fi
	SOURCE="termux/termux-packages"
	if [ "$TERMUX_PACMAN" = true ]; then
		PREFIX="${TERMUX_ROOTFS_PATH%termux*}"
		SUFFIX="${TERMUX_ROOTFS_PATH#"$PREFIX"}"
		TERMUX_ROOTFS_PATH="$PREFIX${SUFFIX/termux/termux-pacman}"
		PREFIX="${TERMUX_BOOTSTRAP_PATH%termux*}"
		SUFFIX="${TERMUX_BOOTSTRAP_PATH#"$PREFIX"}"
		TERMUX_BOOTSTRAP_PATH="$PREFIX${SUFFIX/termux/termux-pacman}"
		SOURCE="termux-pacman/termux-packages"
	fi

	if [ "$TERMUX_32_BIT" = true ]; then
		if [ "$IS64" != true ]; then
			error "'--32-bit' can only be used on 32-bit systems."
		fi
		TERMUX_ROOTFS_PATH+="32"
		TERMUX_BOOTSTRAP_PATH="${TERMUX_BOOTSTRAP_PATH%.zip}32.zip"
		if [ "$ARCH" = "aarch64" ]; then
			ARCH="arm"
		else
			ARCH="i686"
		fi
	fi
}

tit_install() {
	local RESET=false
	while [ "$#" != 0 ]; do
		case "$1" in
			--32-bit)
				TERMUX_32_BIT=true
				;;
			-p|--pacman)
				TERMUX_PACMAN=true
				;;
			--reset)
				RESET=true
				;;
			*)
				usage "Unrecognized option: '$1'"
				;;
		esac
		shift
	done
	tit_set_vars

	if tit_check_installed && [ "$RESET" = false ]; then
		error "System is already installed."
	fi
	if tit_check_installed; then
		local PRESERVE=true
		tit_remove
	fi
	if [ -f "$TERMUX_BOOTSTRAP_PATH" ]; then
		info "Using downloaded Termux bootstrap."
	else
		if [ -e "$TERMUX_BOOTSTRAP_PATH" ]; then
			rm -rf "$TERMUX_BOOTSTRAP_PATH"
		fi
		info "Downloading Termux bootstrap..."
		mkdir -p "$(dirname "$TERMUX_BOOTSTRAP_PATH")"
		if wget "https://github.com/$SOURCE/releases/latest/download/bootstrap-$ARCH.zip" -q --show-progress -O "$TERMUX_BOOTSTRAP_PATH"; then
			info "Termux bootstrap downloaded."
		else
			error "Failed to download Termux bootstrap."
		fi
	fi

	info "Verifying integrity of bootstrap..."
	# shellcheck disable=SC2155
	local EXSHA="$(wget -qO- https://github.com/$SOURCE/releases/latest/download/bootstraps.sha256sum | awk "\$2 == \"bootstrap-$ARCH.zip\" {printf(\$1)}")"
	# shellcheck disable=SC2155
	local RSHA="$(sha256sum "$TERMUX_BOOTSTRAP_PATH" | awk "{printf(\$1)}")"
	if [ "$EXSHA" == "$RSHA" ]; then
		info "SHA256 matches."
	else
		info "\033[31mSHA256 checksums do not match."
		info "\033[31mExpected: $EXSHA"
		info "\033[31mFound: $RSHA"
		if rm -f "$TERMUX_BOOTSTRAP_PATH"; then
			info "Removed corrupted/expired bootstrap. Rerunning script..."
			exec "$(realpath -- "$0")" "${ARGS[@]}"
		else
			error "Failed to remove corrupted/outdated bootstrap. Abort."
		fi
	fi

	mkdir -p "$TERMUX_ROOTFS_PATH"
	if ! cd "$TERMUX_ROOTFS_PATH"; then
		error "Failed to change directory. Abort."
	fi
	info "Extracting Termux bootstrap..."
	if unzip -q "$TERMUX_BOOTSTRAP_PATH"; then
		info "Termux bootstrap extracted."
	else
		error "Failed to extract Termux bootstrap."
	fi

	info "Creating symlinks..."
	while read -r LINK; do
		(IFS="‚Üê"; read -r SRC DEST <<< "$LINK"; ln -sf "$SRC" "$DEST")
	done < SYMLINKS.txt
	info "Created $(wc -l < SYMLINKS.txt) symlinks."
	rm SYMLINKS.txt

	info "Making common directories..."
	mkdir -p home var/cache
	info "Directories are successfully made."
	info "Install finished without errors!"
}

tit_login() {
	local TERMUX_PROOT_ARGS=()
	local INTERACTIVE=true
	while [ "$#" != 0 ]; do
		case "$1" in
			--32-bit)
				TERMUX_32_BIT=true
				;;
			-p|--pacman)
				TERMUX_PACMAN=true
				;;
			-b|--bind)
				if [ "$#" = 1 ]; then
					usage "'--bind' requires an argument."
				fi
				shift
				if [ -z "$1" ]; then
					usage "Please do not pass empty arguments."
				fi
				TERMUX_PROOT_ARGS+=("-b" "$1")
				;;
			-w|--workdir)
				if [ "$#" = 1 ]; then
					usage "'--workdir' requires an argument."
				fi
				shift
				if [ -z "$1" ]; then
					usage "Please do not pass empty arguments."
				fi
				TERMUX_PROOT_ARGS+=("-w" "$1")
				;;
			--)
				shift
				INTERACTIVE=false
				break
				;;
			*)
				usage "Unrecognized option: '$1'."
				;;
		esac
		shift
	done
	tit_set_vars

	if ! tit_check_installed; then
		error "System is not installed."
	fi
	local CMDLINE=(proot --kill-on-exit -r "$TERMUX_ROOTFS_PATH" -w "$TERMUX_FILES_PATH/home")
	if [ "${#TERMUX_PROOT_ARGS[@]}" != 0 ]; then
		CMDLINE+=("${TERMUX_PROOT_ARGS[@]}")
	fi

	for DIR in /dev /proc /sys /system /vendor /apex /sdcard "$PREFIX/..:/host-rootfs"; do
		if [ -d "$DIR" ] || printf "%s\n" "$DIR" | grep -q "com\.termux"; then
			CMDLINE+=(-b "$DIR")
		fi
	done

	CMDLINE+=(-b "$TERMUX_ROOTFS_PATH:$TERMUX_FILES_PATH/usr"
		-b "$TERMUX_ROOTFS_PATH/home:$TERMUX_FILES_PATH/home"
		-b "$TERMUX_ROOTFS_PATH/var/cache:$TERMUX_APP_PATH/cache"
	)

	CMDLINE+=("$TERMUX_FILES_PATH/usr/bin/env" -i
		"HOME=$TERMUX_FILES_PATH/home"
		"PATH=$TERMUX_FILES_PATH/usr/bin"
		"PREFIX=$TERMUX_FILES_PATH/usr"
		"TMPDIR=$TERMUX_FILES_PATH/usr/tmp"
		"ANDROID_DATA=/data"
		"ANDROID_ROOT=/system"
		"EXTERNAL_STORAGE=/sdcard"
		"LD_PRELOAD=$TERMUX_FILES_PATH/usr/lib/libtermux-exec.so"
		"TERM=${TERM=-xterm-256color}"
		"COLORTERM=${TERM=-truecolor}"
		"LANG=${LANG=-en_US.UTF-8}"
		"TERMUX_APK_RELEASE=$TERMUX_APK_RELEASE"
		"TERMUX_VERSION=$TERMUX_VERSION"
	)
	if [ -n "${TERMUX_API_VERSION}" ]; then
		CMDLINE+=("TERMUX_API_VERSION=$TERMUX_API_VERSION")
	fi

	if [ "$INTERACTIVE" = true ]; then
		CMDLINE+=("$TERMUX_FILES_PATH/usr/bin/login")
	else
		if [ "$#" = 0 ]; then
			usage "'--' must be followed by a command."
		fi
		CMDLINE+=("$@")
	fi

	unset LD_PRELOAD
	exec "${CMDLINE[@]}"
}

tit_remove() {
	local ASK=true
	while [ "$#" != 0 ]; do
		case "$1" in
			--32-bit)
				TERMUX_32_BIT=true
				;;
			-p|--pacman)
				TERMUX_PACMAN=true
				;;
			-y|--yes)
				ASK=false
				;;
			*)
				usage "Unrecognized option: '$1'."
				;;
		esac
		shift
	done
	tit_set_vars

	if ! tit_check_installed; then
		error "System is not installed."
	fi
	local KEY
	if [ "$ASK" = true ]; then
		info "Remove system ($TERMUX_ROOTFS_PATH)?"
		info "Press 'n' to abort in 5 seconds."
		read -rsn1 -t5 KEY
	else
		KEY="Y"
	fi
	if [ "${KEY^^}" = "N" ]; then
		error "Abort."
	fi
	info "Removing system..."
	if rm -rf "$TERMUX_ROOTFS_PATH"; then
		info "System is successfully removed."
	else
		error "Failed to remove system."
	fi
}

tit_du() {
	local ONLY_INSTALLED=false
	while [ "$#" != 0 ]; do
		case "$1" in
			-i|--installed)
				ONLY_INSTALLED=true
				;;
			*)
				usage "Unrecognized option: '$1'."
				;;
		esac
		shift
	done

	for TERMUX_ROOTFS_PATH in "$HOME"/termux{,-pacman}-fs{,32}; do
		if [ "$IS64" != true ] && printf "%s\n" "$TERMUX_ROOTFS_PATH" | grep -q "32$"; then
			continue
		fi
	 	if tit_check_installed; then
			printf "\033[32m%s\033[0m: \033[34m%s\033[0m\n" "$(basename "$TERMUX_ROOTFS_PATH")" "$(du -sh "$TERMUX_ROOTFS_PATH" 2>/dev/null | awk "{printf(\$1)}")"
		elif [ "$ONLY_INSTALLED" = false ]; then
			printf "\033[32m%s\033[0m: \033[31m(not installed)\033[0m\n" "$(basename "$TERMUX_ROOTFS_PATH")"
		fi
	done
}

ARGS=("$@")
if [ "$#" = 0 ]; then
	usage "No command is provided."
fi
case "$1" in
	install)
		shift
		tit_install "$@"
		;;
	login)
		shift
		tit_login "$@"
		;;
	remove)
		shift
		tit_remove "$@"
		;;
	du)
		shift
		tit_du "$@"
		;;
	-h|--help)
		usage -ne
		;;
	*)
		usage "Unrecognized command: '$1'."
		;;
esac
